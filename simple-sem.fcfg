## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT

## modified by Benjamin Inden, Nottingham Trent University

## modified by Vital Harachka, Nottingham Trent University


% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(angus)>] -> 'Angus'
PropN[-LOC,NUM=sg,SEM=<\P.P(brutus)>] -> 'Brutus'
PropN[-LOC,NUM=sg,SEM=<\P.P(cyril)>] -> 'Cyril'
PropN[-LOC,NUM=sg,SEM=<\P.P(irene)>] -> 'Irene'
PropN[-LOC,NUM=sg,SEM=<\P.P(avengers)>] -> 'avengers'
PropN[-LOC,NUM=sg,SEM=<\P.P(team3)>] -> 'team3'
PropN[-LOC,NUM=sg,SEM=<\P.P(team1)>] -> 'team1'
PropN[-LOC,NUM=sg,SEM=<\P.P(team2)>] -> 'team2'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'

N[NUM=pl,SEM=<\x.ironman(x)>] -> 'ironman'
N[NUM=pl,SEM=<\x.hulk(x)>] -> 'hulk'
N[NUM=pl,SEM=<\x.thor(x)>] -> 'thor'
N[NUM=pl,SEM=<\x.hawkeye(x)>] -> 'hawkeye'
N[NUM=pl,SEM=<\x.blackpanther(x)>] -> 'blackpanther'
N[NUM=pl,SEM=<\x.vision(x)>] -> 'vision'
N[NUM=pl,SEM=<\x.falcon(x)>] -> 'falcon'
N[NUM=pl,SEM=<\x.antman(x)>] -> 'antman'
N[NUM=pl,SEM=<\x.spiderman(x)>] -> 'spiderman'
N[NUM=pl,SEM=<\x.deadpool(x)>] -> 'deadpool'
N[NUM=pl,SEM=<\x.wolverine(x)>] -> 'wolverine'
N[NUM=pl,SEM=<\x.cyclops(x)>] -> 'cyclops'
N[NUM=pl,SEM=<\x.magnito(x)>] -> 'magnito'
N[NUM=pl,SEM=<\x.quicksilver(x)>] -> 'quicksilver'
N[NUM=pl,SEM=<\x.cat(x)>] -> 'cats'

IV[NUM=sg,SEM=<\x.bark(x)>,TNS=pres] -> 'barks'
IV[NUM=pl,SEM=<\x.bark(x)>,TNS=pres] -> 'bark'
IV[NUM=sg,SEM=<\x.walk(x)>,TNS=pres] -> 'walks'
IV[NUM=pl,SEM=<\x.walk(x)>,TNS=pres] -> 'walk'
TV[NUM=sg,SEM=<\X x.X(\y.chase(x,y))>,TNS=pres] -> 'chases'
TV[NUM=pl,SEM=<\X x.X(\y.chase(x,y))>,TNS=pres] -> 'chase'
TV[NUM=sg,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> 'sees'
TV[NUM=pl,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> 'see'
TV[NUM=sg,SEM=<\X x.X(\y.hear(x,y))>,TNS=pres] -> 'hears'
TV[NUM=pl,SEM=<\X x.X(\y.hear(x,y))>,TNS=pres] -> 'hear'
TV[NUM=sg,SEM=<\X x.X(\y.bite(x,y))>,TNS=pres] -> 'bites'
TV[NUM=pl,SEM=<\X x.X(\y.bite(x,y))>,TNS=pres] -> 'bite'
TV[NUM=sg,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'is_in'
TV[NUM=pl,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'are_in'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.give(x,y,z)))>,TNS=pres] -> 'gives'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.give(x,y,z)))>,TNS=pres] -> 'give'

P[+to] -> 'to'